__author__ = 'gram'from engine import set_debug, place_objects, add_location, add_route, set_location, add_objectfrom engine import game_action, conditional_game_action, have, add_command, run_game, end_game, enable_routefrom engine import set_post_command_handler, pickupdebug = False # Set to true to skip having to get the bucket and chain etcchain_welded = debugbucket_filled = debuggate_unlocked = debugkey_dropped = Falsebeast_message_shown = Falsebeast1_slain = Falseset_debug(debug)add_location('bedroom',    'you are in the bedroom of a wizards house - there is a wizard snoring loudly on the bed.')add_location('garden',    'you are in a beautiful garden - there is a well in front of you.')add_location('attic',    'you are in the attic of the wizards house - there is a giant welding torch in the corner.')add_location('forest',             'you are in the middle of the deep woods. only a few rays of sunlight reach the ground from here. The porch of the wizard\'s house is to your right.')add_route('bedroom', 'west', 'door', 'garden', True)add_route('bedroom', 'upstairs', 'stairway', 'attic', True)add_route('garden', 'east', 'door', 'bedroom', True)add_route('attic', 'downstairs', 'stairway', 'bedroom', True)add_route('garden', 'outside', 'gate', 'forest', False)add_route('forest', 'inside', 'gate', 'garden', True)# Locations of the objects.place_objects({ 'bottle': 'bedroom', 'bucket' : 'bedroom', 'chain' : 'garden', 'frog' : 'garden',                'cake': 'forest', 'crowbar' : 'forest' })set_location('bedroom')# Current location if the player.location = 'bedroom'def weld(subject, object):    global chain_welded    chain_welded, msg = game_action('weld', 'bucket', 'chain', 'attic', True,                               chain_welded,                               'The chain is now securely welded to the bucket',                               subject, object)    return msgdef dunk(subject, object):    global bucket_filled    bucket_filled, msg = conditional_game_action('dunk', 'well', 'bucket', 'garden',                                            False,                                            bucket_filled, chain_welded,                                            'The bucket is now full of water.\n',                                            'The water is too low to reach.\n',                                            subject, object)    return msgdef splash(subject, object):    ok, msg = conditional_game_action('splash', 'wizard', 'bucket', 'bedroom',                                False, False, bucket_filled,                                'The wizard awakens from his slumber.\n',                                'You don\'t have a bucket of water.\n',                               subject, object)    if ok:        if have('frog'):            msg = msg + 'He see you that you stole his frog. He is so upset he banishes you to the netherworld. You lose!\n'            end_game()        else:            msg = msg + 'He greets you warmly and drops a key. But he is confused why you woke him. What now?\n'            add_object('key', 'bedroom')    return msgdef hit(subject, object):    if subject == 'beast':        global beast1_slain        ok, msg = conditional_game_action ('hit', 'beast', 'crowbar', 'forest', False, beast1_slain, True,                        'You deliver a serious blow to the beast\'s head! It has been slain! An ugly carcass now lies on the ground...',                        'You fail to slay the beast!',                        subject, object)        if ok and not beast1_slain:            beast1_slain = True            add_object ('carcass', 'forest')    else:        ok, msg = game_action('hit', 'wizard', 'bucket' , 'bedroom', False, False,                   'The wizard awakens angrily and turns you into a toad. You lose.\n',                   subject, object)    if ok:        end_game()    return msgdef unlock(subject, object):    global gate_unlocked    gate_unlocked, msg = \        conditional_game_action('unlock', 'gate', 'key', 'garden',                                False, gate_unlocked, True,                               'You unlock the gate! It\'s very dark outside...\n',                               'The gate is locked! You need a key to get in!\n',                               subject, object)    if gate_unlocked:        enable_route('garden', 'outside')    return msgadd_command(['splash', 'pour', 'empty'], splash, 2)add_command(['dunk', 'fill', 'lower'], dunk, 2)add_command(['weld', 'join', 'attach'], weld, 2)add_command(['hit', 'strike', 'attack', 'kill', 'slay'], hit, 2)add_command(['unlock', 'unlatch', 'open'], unlock, 2)def post_handler():    global beast_message_shown, beast1_slain    if not beast_message_shown and have('crowbar'):        beast_message_shown = True        return 'Suddenly a menacing beast appears behind you! What do you do?'    elif beast_message_shown and not beast1_slain:        end_game()        return 'The beast lunges at you and tears you to bits! You die and lose!'    if have('cake'):        end_game()        return 'YES! CAKE! YOU WIN THE GAME 100000000 TIMES!!!'    return ''set_post_command_handler(post_handler)def my_pickup(object):    if object == 'carcass':        return 'Looks like you\'ve slain your first beast. Ew. This thing smells horrible! WHY WOULD YOU EVEN TOUCH IT?!?'    return pickup(object)add_command(['get', 'take'], my_pickup, 1)if __name__ == "__main__":    run_game()